@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Order.cshtml";
}

<script>
    var $table = null;

    var InitData = {
        inputField:"",
        //主表初始化数据
        list: {
            F_Id: "",//行ID
            F_RowId: "",//行编号订单号+序号
            F_POId: "",//单据编号
            F_ItemID: "",//物料ID
            F_ItemIDName: "",//物料名称（辅助）
            F_UomID: "",//单位ID
            F_UomIDList: "",//单位ID列表（辅助）
            F_WarehouseID: "",//仓库ID
            F_WarehouseIDList: "",//仓库ID列表（辅助）
            F_BinID: "",//货仓ID
            F_BinIDList: "",//货仓ID列表（辅助）
            F_BillQty: "",//单据数量
            F_OperQty: "",//操作数量
            F_BalanceQty: "",//剩余数量
            F_UnitAmount: "",//单价
            F_UnitCost: "",//单位成本
            F_Amount: "",//总金额
            F_ReturnReasonID: "",//退货原因
            F_ReturnReasonIDList: "",//退货原因列表（辅助）
            F_IsFree: false,//是否免费物料
            F_IsGift: false,//是否赠品
            F_SortCode: "",//序号
            F_EnabledMark: true,//有效否
            F_Description: "",//备注
            details: []//明细行
        },
        //主表控件相关参数
        controlsList: [
            { field: "F_SupplierID", label: "供应商", layer: "header", divClass: "", inputclass: "", controlType: "select", dataType: "text", placeholder: "请输入供应商", url: "", id: "", text: "" },
            { field: "F_PurchaserID", label: "采购员", layer: "header", divClass: "", inputclass: "", controlType: "select", dataType: "text", placeholder: "请输入采购员", url: "", id: "", text: "" },
            { field: "F_BillType", label: "订单类型", layer: "header", divClass: "", inputclass: "", controlType: "select", dataType: "text", placeholder: "请输入订单类型", url: "", id: "", text: "" },
            { field: "F_BillDate", label: "订单日期", layer: "header", divClass: "", inputclass: "", controlType: "input", dataType: "date", placeholder: "" },
            { field: "F_PostDate", label: "过账日期", layer: "header", divClass: "", inputclass: "", controlType: "input", dataType: "date", placeholder: "" },
            { field: "F_TruckID", label: "车辆", layer: "header", divClass: "", inputclass: "", controlType: "select", dataType: "text", placeholder: "请输入车辆", url: "", id: "", text: "" },
            { field: "F_DriverID", label: "司机", layer: "header", divClass: "", inputclass: "", controlType: "select", dataType: "text", placeholder: "请输入司机", url: "", id: "", text: "" },
            { field: "F_IsStockFinished", label: "是否发货", layer: "header", divClass: "", inputclass: "", controlType: "select", dataType: "text", placeholder: "", url: "", id: "", text: "" },
            { field: "F_Status", label: "状态", layer: "header", divClass: "", inputclass: "", controlType: "select", dataType: "text", placeholder: "", url: "", id: "", text: "" },
            { field: "F_EnCode", label: "单据编号", layer: "header", divClass: "", inputclass: "", controlType: "div", dataType: "text", placeholder: "" },
            { field: "F_Description", label: "备注", layer: "footer", divClass: "col-xs-12", inputclass: "", controlType: "input", dataType: "text", placeholder: "请输入您要备注的内容" },
            { field: "F_CreatorUserId", label: "制单人", layer: "footer", divClass: "col-xs-2", inputclass: "", controlType: "div", dataType: "text", placeholder: "" },
            { field: "F_LastModifyUserId", label: "修改人", layer: "footer", divClass: "col-xs-2", inputclass: "", controlType: "div", dataType: "text", placeholder: "" },
            { field: "F_ConfirmUserId", label: "审批人", layer: "footer", divClass: "col-xs-2", inputclass: "", controlType: "div", dataType: "text", placeholder: "" },

        ],
        detail: {
            F_ItemID: "",//商品编号
            F_ItemIDName: "",//商品名称
            F_UomID: "",//单位
            F_IsGift: "",//是否赠品
            F_UnitAmount: "",//单价(¥)
            F_BillQty: "",//订单数量
            F_OperQty: "",//实际数量
            F_BalanceQty: "",//剩余数量
            F_Amount: "",//金额(¥)
            F_WarehouseID: "",//仓库
            F_Description: ""//备注
        },
        //明细控件相关参数
        controlsDetails: [
            { field: "F_ItemID", nextFocusField: "F_UomID", label: "商品编号", totalLabel: "", width: "120px", align: 'left', divClass: "", inputclass: "", controlType: "autocomplete", dataType: "text", placeholder: "", url: "", id: "", text: "", isTotal: false },
            { field: "F_ItemIDName", nextFocusField: "", label: "商品名称", totalLabel: "", width: "120px", align: 'left', divClass: "", inputclass: "", controlType: "div", dataType: "text", placeholder: "", url: "", id: "", text: "", isTotal: false },
            { field: "F_UomID", nextFocusField: "F_IsGift", label: "单位", totalLabel: "", width: "60px", align: 'center', divClass: "", inputclass: "", controlType: "select", dataType: "text", placeholder: "", url: "", id: "", text: "", isTotal: false },
            { field: "F_IsGift", nextFocusField: "F_UnitAmount", label: "是否赠品", totalLabel: "", width: "80px", align: 'center', divClass: "", inputclass: "", controlType: "select", dataType: "", placeholder: "", url: "", id: "", text: "", isTotal: false },
            { field: "F_UnitAmount", nextFocusField: "F_BillQty", label: "单价(¥)", totalLabel: "", width: "80px", align: 'center', divClass: "", inputclass: "", controlType: "input", dataType: "number", placeholder: "", url: "", id: "", text: "", isTotal: false },
            { field: "F_BillQty", nextFocusField: "F_OperQty", label: "订单数量", totalLabel: "", width: "80px", align: 'right', divClass: "", inputclass: "", controlType: "input", dataType: "number", placeholder: "", url: "", id: "", text: "", isTotal: true },
            { field: "F_OperQty", nextFocusField: "F_Amount", label: "实际数量", totalLabel: "", width: "80px", align: 'right', divClass: "", inputclass: "", controlType: "input", dataType: "number", placeholder: "", url: "", id: "", text: "", isTotal: true },
            { field: "F_BalanceQty", nextFocusField: "", label: "剩余数量", totalLabel: "", width: "80px", align: 'right', divClass: "", inputclass: "", controlType: "input", dataType: "number", placeholder: "", url: "", id: "", text: "", isTotal: true },
            { field: "F_Amount", nextFocusField: "F_WarehouseID", label: "金额(¥)", totalLabel: "", width: "80px", align: 'right', divClass: "", inputclass: "", controlType: "input", dataType: "number", placeholder: "", url: "", id: "", text: "", isTotal: true },
            { field: "F_WarehouseID", nextFocusField: "F_Description", label: "仓库", totalLabel: "", width: "100px", align: 'center', divClass: "", inputclass: "", controlType: "select", dataType: "", placeholder: "", url: "", id: "", text: "", isTotal: false },
            { field: "F_Description", nextFocusField: "", label: "备注", totalLabel: "", width: "100px", align: 'left', divClass: "", inputclass: "", controlType: "input", dataType: "text", placeholder: "", url: "", id: "", text: "", isTotal: false }
        ]
    }

    $(function () {
        initControl();
    })
    function initControl() {
        var modelVue = new Vue({
            el: '.pur',
            data: JSON.parse(JSON.stringify(InitData)),
            computed: {
                saveData: function () {
                    var _self = this;
                    var arr = _self.list.details.filter(function (item) {
                        return item.F_ItemID == ""
                    });
                    _self.autoAddRow(arr);
                    return arr;
                },
                total: function () {//求和                        
                    var _self = this;
                    var totalObj = {};
                    _self.controlsDetails.map(function (item) {
                        if (!!item.isTotal) {                            
                            var total_sum = _self.saveData.reduce(function (sum, row) {
                                if (row[item.field] != "") {
                                    return (sum) + parseFloat(row[item.field] || 0);
                                } else {
                                    return (sum);
                                }
                            }, 0);
                            
                            totalObj[item.field] = total_sum;
                        }

                    });
                    return totalObj;
                },
            },
            created: function () {
                var _self = this;
 
                for (var i = 0; i < 10; i++) {
                    _self.list.details.push(JSON.parse(JSON.stringify(_self.detail)));
                }
            },
            mounted: function () {
                var _self = this;
                _self.autoHeight();
                _self.autoAddRow(_self.list.details);
                //var rowCount = Math.round($(".fixed-table-body").height() / 32);
                //for (var i = 0; i < rowCount; i++) {
                //    _self.details.push(JSON.parse(JSON.stringify(_self.detail)));
                //}
            },
            methods: {
                //选择事件
                handleFocus: function (event, tbodyItem, itemThead, field) {
                    $(event.target).select();
                },
                handleFocusTo: function (event, trIndex, colIndex, trItem, colItem) {
                    var el = event.target;
                    var options = {
                        minLength: 0,
                        minChars: 0,
                        autoFocus: false,
                        delay: 0,
                        source: function (request, response) {
                            if (term in cache) {
                                response(cache[term]);
                                return;
                            }

                            //$.getJSON("search.php", request, function (data, status, xhr) {
                            //    cache[term] = data;
                            //    response(data);
                            //});
                        },
                        classes: {
                            "ui-autocomplete": "highlight"
                        },
                        focus: function (event, ui) {
                            return false;
                        },
                        select: function (event, ui) {
                            trItem.Code = ui.item.value;
                            trItem.Name = ui.item.text;
                            $(el).blur();
                            return false;
                        }
                    };
                    var auto = $(el).autocomplete(options);

                    auto.autocomplete("instance")._renderItem = function (ul, item) {
                        return $("<li>")
                    .append("<div>" + item.label + "</div>")
                    .appendTo(ul);
                    };

                    //$(el).autocomplete("search", $(el).val());
                },
                //点击单元格后变成输入状态
                handleClickInput: function (event, field, tbodyIndex, itemThead) {
                    var _self = this;
                    _self.inputField = field + tbodyIndex;
                    var $obj = $(event.target).closest('td');

                    Vue.nextTick(function () {
                        if (itemThead.type != "select") {
                            setTimeout(function () {
                                $obj.find('input').focus();
                            }, 100)

                        } else {
                            $obj.find("[data-name='" + field + "']").focus();
                            $obj.find("[data-name='" + field + "']").on("change", function (e) {
                                setTimeout(function () {
                                    $('#' + $obj.data("nextfocusfield") + $obj.data("rowindex")).click();
                                }, 100)

                            })
                            $obj.find("[data-name='" + field + "']").select2("open");

                        }
                    })
                },
                //离开焦点时变成不可编辑状态
                handleBlur: function (trIdName) {
                    //如果焦点移开至非单元格，则清空
                    if (this.inputField == trIdName) {
                        this.inputField = "";
                    }
                },
                hanldeEnter: function (event) {

                },
                hanldeClickDelete: function (tbodyIndex) { },
                autoAddRow: function (arr) {
                    var _self = this;

                    var defautRows = Math.ceil($(".fixed-table-body").height() / 32.4);
                    var r = _self.list.details.length - arr.length < defautRows;
                    if (_self.list.details.length - arr.length < defautRows) {
                        for (var i = 0; i < defautRows ; i++) {
                            //将单据号赋值给明细
                            if (_self.list.details && _self.list.details.length > 0) {
                                _self.list.details.push(JSON.parse(JSON.stringify(_self.detail)));
                            };
                        }
                    }
                    _self.autoWidth();
                },
                autoHeight: function () {
                    var _self = this;
                    $(".fixed-table-body").height($(window).height() - $(".fixed-table-body").offset().top - 160);
                    $(window).resize(function () {
                        $(".fixed-table-body").height($(window).height() - $(".fixed-table-body").offset().top - 160);
                        _self.autoWidth();
                    })
                },
                //确保表格宽度一致，滚动条占用了宽度
                autoWidth: function () {
                    Vue.nextTick(function () {
                        var w = $(".fixed-table-body .table")[0].getBoundingClientRect().width;
                        $(".fixed-table-header .table").width(w);
                        $(".fixed-table-footer .table").width(w);
                    })
                },
            }
        })
    }


</script>


@{Html.RenderPartial("~/Views/Partial/PartialOrder.cshtml");}  


